// Mocks generated by Mockito 5.4.5 from annotations
// in lebedew_app/test/viewmodels/trouble_report_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i5;

import 'package:lebedew_app/domain/entities/trouble_report.dart' as _i4;
import 'package:lebedew_app/domain/repositories/trouble_report_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TroubleReportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTroubleReportRepository extends _i1.Mock
    implements _i2.TroubleReportRepository {
  MockTroubleReportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> submitReport(
    _i4.TroubleReport? report,
    List<_i5.File>? images,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitReport,
          [
            report,
            images,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<String> saveImage(_i5.File? image) => (super.noSuchMethod(
        Invocation.method(
          #saveImage,
          [image],
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #saveImage,
            [image],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> submitTroubleReport(_i4.TroubleReport? report) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitTroubleReport,
          [report],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
